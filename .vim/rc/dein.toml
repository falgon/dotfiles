[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertCharPre'
depends = 'context_filetype.vim'
hook_add = '''
    call deoplete#enable()
    " No display of the number of competion list
    set shortmess+=c

    " <TAB>: completion.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ deoplete#manual_complete()
    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    " <S-TAB>: completion back.
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
    " <C-e>: popup cancel
    inoremap <expr><C-e>       deoplete#cancel_popup()

    call deoplete#custom#source('_', 'matchers', ['matcher_head'])
    call deoplete#custom#source('_', 'converters', [
          \ 'converter_remove_paren',
          \ 'converter_remove_overlap',
          \ 'matcher_length',
          \ 'converter_truncate_abbr',
          \ 'converter_truncate_menu',
          \ 'converter_auto_delimiter',
          \ ])
    call deoplete#custom#option('keyword_patterns', {
          \ '_': '[a-zA-Z_]\k*\(?',
          \ 'tex': '[^\w|\s][a-zA-Z_]\w*',
          \ })
    call deoplete#custom#option('camel_case', v:false)
    call deoplete#custom#option('ignore_case', v:false)
    call deoplete#custom#option('refresh_always', v:false)
    call deoplete#custom#option('smart_case', v:true)
    call deoplete#custom#option('max_list', 10000)
    call deoplete#custom#option('auto_complete_delay', 0)
  '''
on_i = 1

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']


[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
	let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component_function': {
        \   'modified': 'LightLineModified',
        \   'readonly': 'LightLineReadonly',
        \   'fugitive': 'LightLineFugitive',
        \   'filename': 'LightLineFilename',
        \   'fileformat': 'LightLineFileformat',
        \   'filetype': 'LightLineFiletype',
        \   'fileencoding': 'LightLineFileencoding',
        \   'mode': 'LightLineMode'
        \ }
        \ }

    function! LightLineModified()
        return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endfunction

    function! LightLineReadonly()
        return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
    endfunction

    function! LightLineFilename()
        return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
            \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
            \  &ft == 'unite' ? unite#get_status_string() :
            \  &ft == 'vimshell' ? vimshell#get_status_string() :
            \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
            \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
    endfunction

    function! LightLineFugitive()
        if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
            return fugitive#head()
        else
            return ''
        endif
    endfunction

    function! LightLineFileformat()
        return winwidth(0) > 70 ? &fileformat : ''
    endfunction

    function! LightLineFiletype()
        return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
    endfunction

    function! LightLineFileencoding()
        return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
    endfunction

    function! LightLineMode()
        return winwidth(0) > 60 ? lightline#mode() : ''
    endfunction
    set laststatus=2
  '''

[[plugins]]
repo = 'tpope/vim-obsession'

